#!/usr/bin/env python3
"""
This is the main components of the client registar for Naumachia2
It is designed to interface with the OpenVPN learn-address event.
Whenever OpenVPN fires that event off, this script updates Redis
"""

from argparse import ArgumentParser
from redis import StrictRedis
from os import getenv

redis_hostname = getenv('REDIS_HOSTNAME', 'redis')
addr_key = getenv('NAUM_ADDR_KEY', 'addrs')
cn_key = getenv('NAUM_CN_KEY', 'cnames')

if __name__ == "__main__":
    parser = ArgumentParser(description="Interface with the OpenVPN. Stores CN-address realations into a Redis DB")
    parser.add_argument('action', help="The action to be prefeormed for the given args. From set {add, update, delete}", choices=["add", "update", "delete"])
    parser.add_argument('addr', help="MAC address associated with the given common name")
    parser.add_argument('cn', help="The common name (CN) associated with the address", nargs='?') 

    args = parser.parse_args()

    redis = StrictRedis(host=redis_hostname, port=6379)

    if args.action == "add" or args.action == "update":
        if not args.cn:
            raise ValueError("CN is required for add/update")
        addr = redis.hget(cn_key, args.cn)
        if addr:
            redis.hdel(addr_key, addr)
        redis.hset(cn_key, args.cn, args.addr)
        redis.hset(addr_key, args.addr, args.cn)

    elif args.action == "delete":
        cn = redis.hget(addr_key, args.addr)
        if cn:
            redis.hdel(cn_key, cn)
        redis.hdel(addr_key, args.addr)

    else:
        raise ValueError("Unrecognized command: {}".format(args.action))

    print("Successful completed {} {} {}".format(args.action, args.addr, args.cn))
