version: '2.1'

services:
    {% if DEBUG -%}
    # Eve is container designed to connect to the network for testing a debugging
    eve:
        build: ./eve/build
        networks:
            default:
            internal:
        stdin_open: true
        tty: true
        volumes:
            - ./eve/config:/config
            - ./:/mnt/host
        privileged: true

    {% endif -%}
    {% for name, chal in challenges.items() -%}
    openvpn-{{ name }}:
        extends:
            file: openvpn-compose.yml
            service: openvpn
        depends_on:
            - redis
        volumes:
            - ./openvpn/config/{{ name }}:/etc/openvpn
        networks:
            default:
                aliases:
                    - "{{ name }}.{{ domain }}"
            internal:
        ports:
            - "{{ chal.port }}:1194/udp"
        environment:
            - NAUM_FILES={{ chal.files|tojson }}
            - NAUM_CHAL="{{ name }}"

    {% endfor -%}
    {% if registrar -%}
    registrar:
        build:
            context: ./registrar/build
        image: naumachia/registrar
        volumes:
            - ./openvpn/config/:/var/config
            - ./registrar/app:/var/app:ro
        environment:
            - OPENVPN_BASE=/var/config
        networks:
            internal:
        ports:
            - "{{ registrar_port }}:3960"
        command: [python, /var/app/server.py]

    {% endif -%}
    redis:
        image: "redis:alpine"
        networks:
            internal:
                aliases:
                    - "$REDIS_HOSTNAME"
        volumes:
            - ./redis/config:/usr/local/etc/redis
        command: [redis-server, /usr/local/etc/redis/redis.conf]
        restart: unless-stopped

    cluster-manager:
        build: ./cluster-manager/build
        depends_on:
            - redis
        networks: 
            internal:
        volumes:
            - ./cluster-manager/app:/app
            - ./challenges:/challenges
            - /var/run/docker.sock:/var/run/docker.sock
            - /var/run/docker/netns/default:/var/run/netns/host
        command: [python3, /app/manager.py]
        environment:
            - REDIS_HOSTNAME
            - REDIS_PORT
            - REDIS_DB
            - REDIS_PASSWORD
        privileged: true # TODO: Narrow down privileges
        restart: unless-stopped


networks:
    internal:
        internal: true
